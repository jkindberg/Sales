web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
website[-1] <- map(website[-1], as.numeric)
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
glimpse(web)
website <- web[names(web)[c(1, 63:70)]]
glimpse(website)
map(website[-1], as.numeric) %>% glimpse
map(website, as.numeric) %>% glimpse
class(website)
clss(data.frame(websitE))
clss(data.frame(website))
class(data.frame(website))
website <- data.frame(web[names(web)[c(1, 63:70)]])
map(website[-1], as.numeric)
glimpse(website)
v
website <- web[names(web)[c(1, 63:70)]]
website <- web[names(web)[c(1, 63:70)]]
website
website[-1] <- map(website[,-1], as.numeric)
map(website[,-1], as.numeric)
map(website[1], as.numeric)
map(website[2], as.numeric)
map_dbl(website[2], as.numeric)
map_dbl(website[,2], as.numeric)
glimpse(websitE)
glimpse(website)
change <- names(website)[-1]
change
map(website[change], as.numeric)
website$change[1]
change[1]
website$"TOTAL"
website$print(change[1])
website["TOTAL"]
website[["TOTAL"]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
glimpse(website)
map_dbl(website, function(x) sum(is.na(x))/length(x))
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
sales$month_created <- as.Date(cut(sales$Created,
breaks = "month"))
sales$week_created <- as.Date(cut(sales$Created,
breaks = "week"))
sales$month_active <- as.Date(cut(sales$Active,
breaks = "month"))
sales$Count <- rep(1, nrow(sales))
state_mapping <- read_csv("states.csv")
names(state_mapping) <- c("region","State") # for merge
state_mapping$region <- tolower(state_mapping$region) #for merge
head(state_mapping)
state_data <- ggplot2::map_data("state")
glimpse(state_data)
state_mapping <- left_join(state_data, state_mapping,  by = "region")
glimpse(state_mapping)
state_sales <- merge(sales, state_mapping, sort=F)
glimpse(sales)
map_dbl(sales, function(x) sum(is.na(x))/nrow(sales)) %>% sort
map_dbl(sales, function(x) length(unique(x))) %>% sort
ggplot(sales, aes(Amount)) + geom_histogram(binwidth=10)
ggplot(sales, aes(Product)) + geom_bar() + coord_flip()
ggplot(sales, aes(Benefit)) + geom_bar() + coord_flip()
melted_website <- melt(website, id.vars = "Date")
melted_website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Sessions, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Users, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Pageviews, `Total Web Sales`)) + geom_point() + geom_smooth()#
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(`Pages/ Session`, `Total Web Sales`)) + geom_point() + geom_smooth()
sales$State %>% table %>% sort(decreasing=T) %>% data.frame
table(is.na(sales$`Date Inactive`) == is.na(sales$`Inactive Reason`))
table(sales$`Inactive Reason`) %>% sort(decreasing=T) %>% data.frame %>% head(10)
sales %>%
group_by(month_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=month_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_count = sum(Count, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_count, fill=Product)) + geom_bar(stat="identity")
st <- state_sales %>%
group_by(region, lat, long, group) %>%
summarise(total_amount = sum(Amount, na.rm = T))
ggplot(st, aes(long, lat)) + geom_polygon(aes(group=group, fill=total_amount)) +
geom_path(colour="grey50")
install.packages("googleViz")
install.packages("googleVis")
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
glimpse(states)
sales
glimpse(sales)
glimpse(sales)
glimpse(states)
glimpse(state_mapping)
sales <- left_join(sales, state_mapping)
glimpse(sales)
a <- sales$region
a
substr(a, 0)
substr(a, 0,0)
substr(a, 1,1)
substr(a, 1,1) <- toupper(substr(a,1,1))
a
sales <- left_join(sales, state_mapping)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1))
glimpse(sales)
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
sales$month_created <- as.Date(cut(sales$Created,
breaks = "month"))
sales$week_created <- as.Date(cut(sales$Created,
breaks = "week"))
sales$month_active <- as.Date(cut(sales$Active,
breaks = "month"))
sales$Count <- rep(1, nrow(sales))
state_mapping <- read_csv("states.csv")
names(state_mapping) <- c("region","State") # for merge
state_mapping$region <- tolower(state_mapping$region) #for merge
head(state_mapping)
sales <- left_join(sales, state_mapping)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1)) # nice
glimpse(website)
glimpse(saleS)
glimpse(sales)
df <- website %>%
group_by(region) %>%
mutate(Count = sum(Count))
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))
df
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1)) # nice
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
sales$month_created <- as.Date(cut(sales$Created,
breaks = "month"))
sales$week_created <- as.Date(cut(sales$Created,
breaks = "week"))
sales$month_active <- as.Date(cut(sales$Active,
breaks = "month"))
sales$Count <- rep(1, nrow(sales))
state_mapping <- read_csv("states.csv")
names(state_mapping) <- c("region","State") # for merge
state_mapping$region <- tolower(state_mapping$region) #for merge
head(state_mapping)
sales <- left_join(sales, state_mapping)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1)) # nice
state_data <- ggplot2::map_data("state")
glimpse(state_data)
state_mapping <- left_join(state_data, state_mapping,  by = "region")
glimpse(state_mapping)
state_sales <- merge(sales, state_mapping, sort=F)
glimpse(sales)
map_dbl(sales, function(x) sum(is.na(x))/nrow(sales)) %>% sort
map_dbl(sales, function(x) length(unique(x))) %>% sort
ggplot(sales, aes(Amount)) + geom_histogram(binwidth=10)
ggplot(sales, aes(Product)) + geom_bar() + coord_flip()
ggplot(sales, aes(Benefit)) + geom_bar() + coord_flip()
melted_website <- melt(website, id.vars = "Date")
melted_website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Sessions, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Users, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Pageviews, `Total Web Sales`)) + geom_point() + geom_smooth()#
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(`Pages/ Session`, `Total Web Sales`)) + geom_point() + geom_smooth()
sales$State %>% table %>% sort(decreasing=T) %>% data.frame
table(is.na(sales$`Date Inactive`) == is.na(sales$`Inactive Reason`))
table(sales$`Inactive Reason`) %>% sort(decreasing=T) %>% data.frame %>% head(10)
sales %>%
group_by(month_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=month_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_count = sum(Count, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_count, fill=Product)) + geom_bar(stat="identity")
st <- state_sales %>%
group_by(region, lat, long, group) %>%
summarise(total_amount = sum(Amount, na.rm = T))
ggplot(st, aes(long, lat)) + geom_polygon(aes(group=group, fill=total_amount)) +
geom_path(colour="grey50")
ggplot(sales) + geom_bar(mapping=aes(as.character(month_created), fill = State), position = "fill") + theme(axis.text.x = element_text(angle = 45))
# get sheet names from excel file
readxl::excel_sheets("2017 Sales Summary.xlsx")
melted_website %>%
filter(variable %in% c("Date","Total Web Sales", "Sessions","Users","Pageviews")) %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
knit(plot(GeoStates))
library(knitr)
knit(plot(GeoStates))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates), output_format = "rmarkdown::md_document")
rmarkdown::render(plot(GeoStates), output_format = "rmarkdown::html_document")
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html"))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html")
?capture.output
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html")
getwd()
getwd()
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html"))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document"),
file = "heatmap.html")
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document"),
file = "heatmap.html")
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
plot(GeoStates)
plot(GeoStates)
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = mean(Amount))  %>%
select(region, Amount)
GeoStates <- gvisGeoChart(df, "region", "Amount",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
glimpse(USArrests)
library(flexdashboard)
library(knitr)
library(highcharter)
library(viridisLite)
library(tidyverse)
glimpse(USArrests)
glimpse(usgeojson)
usgeojson
usgeojson[1]
usgeojson[2]
usgeojson[3]
usgeojson[3]%>% class
library(DT)
?DT
?datatable
website
web_series
library(flexdashboard)
library(knitr)
library(DT)
knit("sales_eda.Rmd")
