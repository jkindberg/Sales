website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Sessions, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Users, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Pageviews, `Total Web Sales`)) + geom_point() + geom_smooth()#
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(`Pages/ Session`, `Total Web Sales`)) + geom_point() + geom_smooth()
sales$State %>% table %>% sort(decreasing=T) %>% data.frame
table(is.na(sales$`Date Inactive`) == is.na(sales$`Inactive Reason`))
table(sales$`Inactive Reason`) %>% sort(decreasing=T) %>% data.frame %>% head(10)
sales %>%
group_by(month_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=month_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_count = sum(Count, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_count, fill=Product)) + geom_bar(stat="identity")
st <- state_sales %>%
group_by(region, lat, long, group) %>%
summarise(total_amount = sum(Amount, na.rm = T))
ggplot(st, aes(long, lat)) + geom_polygon(aes(group=group, fill=total_amount)) +
geom_path(colour="grey50")
ggplot(sales) + geom_bar(mapping=aes(as.character(month_created), fill = State), position = "fill") + theme(axis.text.x = element_text(angle = 45))
# get sheet names from excel file
readxl::excel_sheets("2017 Sales Summary.xlsx")
melted_website %>%
filter(variable %in% c("Date","Total Web Sales", "Sessions","Users","Pageviews")) %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
knit(plot(GeoStates))
library(knitr)
knit(plot(GeoStates))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates), output_format = "rmarkdown::md_document")
rmarkdown::render(plot(GeoStates), output_format = "rmarkdown::html_document")
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html"))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html")
?capture.output
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html")
getwd()
getwd()
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html"))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document"),
file = "heatmap.html")
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document"),
file = "heatmap.html")
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
plot(GeoStates)
plot(GeoStates)
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = mean(Amount))  %>%
select(region, Amount)
GeoStates <- gvisGeoChart(df, "region", "Amount",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
glimpse(USArrests)
library(flexdashboard)
library(knitr)
library(highcharter)
library(viridisLite)
library(tidyverse)
glimpse(USArrests)
glimpse(usgeojson)
usgeojson
usgeojson[1]
usgeojson[2]
usgeojson[3]
usgeojson[3]%>% class
library(DT)
?DT
?datatable
website
web_series
library(flexdashboard)
library(knitr)
library(DT)
knit("sales_eda.Rmd")
<<<<<<< HEAD
=======
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
glimpse(sales)
table(sales$Product)
strsplit(sales$Product)
strsplit(sales$Product, " ")
strsplit(sales$Product, " ") %>% data.frame
strsplit(sales$Product, " ") %>% summary
strsplit(sales$Product, " ")[[1]]
strsplit(sales$Product, " ")[[3]]
strsplit(sales$Product, " ") %>% tibble
strsplit(sales$Product, " ") %>% ldply
library(tidyverse)
strsplit(sales$Product, " ") %>% ldply
strsplit(sales$Product, " ") %>% lddply
strsplit(sales$Product, " ") %>% as.data.frame
strsplit(sales$Product, " ") %>% as.matrix
strsplit(sales$Product, " ") %>% unlist
table(sales$Product)
grepl("3x4", sales$Product)
sales$tree_four <- ifelse(grepl("3x4", sales$Product),
"3x4", "Regular")
table(sales$tree_four)
sales$three_four <- ifelse(grepl("3x4", sales$Product),
"3x4", "Regular")
sales$product_level <- ifelse(grepl("Deluxe", sales$Product),
"Deluxe",
ifelse(grepl("Choice", sales$Product),
"Choice",
ifelse(grepl("Economy", sales$Product),
"Economy", "Standard")))
table(sales$product_level)
library(flexdashboard)
library(knitr)
library(DT)
sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
mpgg <- mpg %>%
filter(class %in% c("suv", "compact", "midsize")) %>%
group_by(class, manufacturer) %>%
summarize(count = n())
categories_grouped <- mpgg %>%
group_by(name = class) %>%
do(categories = .$manufacturer) %>%
list_parse()
library(purrr)
library(purrr)
mpgg <- mpg %>%
filter(class %in% c("suv", "compact", "midsize")) %>%
group_by(class, manufacturer) %>%
summarize(count = n())
categories_grouped <- mpgg %>%
group_by(name = class) %>%
do(categories = .$manufacturer) %>%
list_parse()
library(purrr)
mpgg <- mpg %>%
filter(class %in% c("suv", "compact", "midsize")) %>%
group_by(class, manufacturer) %>%
summarize(count = n())
categories_grouped <- mpgg %>%
group_by(name = class) %>%
do(categories = .$manufacturer)
categories_grouped
mpgg
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level)
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, color = product_level),
showInLegend = TRUE)
library(flexdashboard)
library(knitr)
library(DT)
library(tidyverse)
library(plotly)
ggplotly(week_sales)
library(flexdashboard)
library(knitr)
library(DT)
library(tidyverse)
knit("sales_eda.Rmd")
library(highcharter)
library(viridisLite)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)) %>%
list.parse2()
highchart() %>%
hc_add_series_map(usgeojson, USArrests, name = "Sales",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_add_theme(thm)
categories_grouped
products
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level)
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, color = product_level),
showInLegend = TRUE)
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level)
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, color = product_level),
showInLegend = FALSE)
knit_with_parameters('C:/Users/Warner/Desktop/Big Deal/Pivot Health/Sales Data/sales_dashboard.Rmd')
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, group = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level,
color = product_level,
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level,
color = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = product_level) %>%
do(categories = .$three_four) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = FALSE) %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = TRUE) %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_theme(hc_theme_flat())
?do
categories_grouped
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
#highchart() %>%
# hc_add_series(data = products, type = "bar",
#              hcaes(y = count,
#                   group = product_level),
#            showInLegend = TRUE) %>%
#hc_xAxis(categories = categories_grouped) %>%
#hc_add_theme(hc_theme_economist())
ggplot(products, aes(factor(product_level), count, fill = three_four)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
#highchart() %>%
# hc_add_series(data = products, type = "bar",
#              hcaes(y = count,
#                   group = product_level),
#            showInLegend = TRUE) %>%
#hc_xAxis(categories = categories_grouped) %>%
#hc_add_theme(hc_theme_economist())
ggplot(products, aes(factor(product_level), count, fill = three_four)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") + coord_flip()
>>>>>>> development
