<<<<<<< HEAD
<<<<<<< HEAD
=======
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
website[-1] <- map(website[-1], as.numeric)
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
glimpse(web)
website <- web[names(web)[c(1, 63:70)]]
glimpse(website)
map(website[-1], as.numeric) %>% glimpse
map(website, as.numeric) %>% glimpse
class(website)
clss(data.frame(websitE))
clss(data.frame(website))
class(data.frame(website))
website <- data.frame(web[names(web)[c(1, 63:70)]])
map(website[-1], as.numeric)
glimpse(website)
v
website <- web[names(web)[c(1, 63:70)]]
website <- web[names(web)[c(1, 63:70)]]
website
website[-1] <- map(website[,-1], as.numeric)
map(website[,-1], as.numeric)
map(website[1], as.numeric)
map(website[2], as.numeric)
map_dbl(website[2], as.numeric)
map_dbl(website[,2], as.numeric)
glimpse(websitE)
glimpse(website)
change <- names(website)[-1]
change
map(website[change], as.numeric)
website$change[1]
change[1]
website$"TOTAL"
website$print(change[1])
website["TOTAL"]
website[["TOTAL"]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
glimpse(website)
map_dbl(website, function(x) sum(is.na(x))/length(x))
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
sales$month_created <- as.Date(cut(sales$Created,
breaks = "month"))
sales$week_created <- as.Date(cut(sales$Created,
breaks = "week"))
sales$month_active <- as.Date(cut(sales$Active,
breaks = "month"))
sales$Count <- rep(1, nrow(sales))
state_mapping <- read_csv("states.csv")
names(state_mapping) <- c("region","State") # for merge
state_mapping$region <- tolower(state_mapping$region) #for merge
head(state_mapping)
state_data <- ggplot2::map_data("state")
glimpse(state_data)
state_mapping <- left_join(state_data, state_mapping,  by = "region")
glimpse(state_mapping)
state_sales <- merge(sales, state_mapping, sort=F)
glimpse(sales)
map_dbl(sales, function(x) sum(is.na(x))/nrow(sales)) %>% sort
map_dbl(sales, function(x) length(unique(x))) %>% sort
ggplot(sales, aes(Amount)) + geom_histogram(binwidth=10)
ggplot(sales, aes(Product)) + geom_bar() + coord_flip()
ggplot(sales, aes(Benefit)) + geom_bar() + coord_flip()
melted_website <- melt(website, id.vars = "Date")
melted_website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Sessions, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Users, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Pageviews, `Total Web Sales`)) + geom_point() + geom_smooth()#
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(`Pages/ Session`, `Total Web Sales`)) + geom_point() + geom_smooth()
sales$State %>% table %>% sort(decreasing=T) %>% data.frame
table(is.na(sales$`Date Inactive`) == is.na(sales$`Inactive Reason`))
table(sales$`Inactive Reason`) %>% sort(decreasing=T) %>% data.frame %>% head(10)
sales %>%
group_by(month_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=month_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_count = sum(Count, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_count, fill=Product)) + geom_bar(stat="identity")
st <- state_sales %>%
group_by(region, lat, long, group) %>%
summarise(total_amount = sum(Amount, na.rm = T))
ggplot(st, aes(long, lat)) + geom_polygon(aes(group=group, fill=total_amount)) +
geom_path(colour="grey50")
install.packages("googleViz")
install.packages("googleVis")
library(googleVis)
require(datasets)
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
glimpse(states)
sales
glimpse(sales)
glimpse(sales)
glimpse(states)
glimpse(state_mapping)
sales <- left_join(sales, state_mapping)
glimpse(sales)
a <- sales$region
a
substr(a, 0)
substr(a, 0,0)
substr(a, 1,1)
substr(a, 1,1) <- toupper(substr(a,1,1))
a
sales <- left_join(sales, state_mapping)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1))
glimpse(sales)
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
sales$month_created <- as.Date(cut(sales$Created,
breaks = "month"))
sales$week_created <- as.Date(cut(sales$Created,
breaks = "week"))
sales$month_active <- as.Date(cut(sales$Active,
breaks = "month"))
sales$Count <- rep(1, nrow(sales))
state_mapping <- read_csv("states.csv")
names(state_mapping) <- c("region","State") # for merge
state_mapping$region <- tolower(state_mapping$region) #for merge
head(state_mapping)
sales <- left_join(sales, state_mapping)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1)) # nice
glimpse(website)
glimpse(saleS)
glimpse(sales)
df <- website %>%
group_by(region) %>%
mutate(Count = sum(Count))
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))
df
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1)) # nice
library(tidyverse)
library(readxl)
library(reshape2)
library(ggplot2)
library(maps)
# load raw data sheet
sales <- read_excel("2017 Sales Summary.xlsx",
sheet = "Raw Data From Adroit")
# web sales data sheet
web <- read_excel("2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
sales$month_created <- as.Date(cut(sales$Created,
breaks = "month"))
sales$week_created <- as.Date(cut(sales$Created,
breaks = "week"))
sales$month_active <- as.Date(cut(sales$Active,
breaks = "month"))
sales$Count <- rep(1, nrow(sales))
state_mapping <- read_csv("states.csv")
names(state_mapping) <- c("region","State") # for merge
state_mapping$region <- tolower(state_mapping$region) #for merge
head(state_mapping)
sales <- left_join(sales, state_mapping)
substr(sales$region, 1,1) <- toupper(substr(sales$region,1,1)) # nice
state_data <- ggplot2::map_data("state")
glimpse(state_data)
state_mapping <- left_join(state_data, state_mapping,  by = "region")
glimpse(state_mapping)
state_sales <- merge(sales, state_mapping, sort=F)
glimpse(sales)
map_dbl(sales, function(x) sum(is.na(x))/nrow(sales)) %>% sort
map_dbl(sales, function(x) length(unique(x))) %>% sort
ggplot(sales, aes(Amount)) + geom_histogram(binwidth=10)
ggplot(sales, aes(Product)) + geom_bar() + coord_flip()
ggplot(sales, aes(Benefit)) + geom_bar() + coord_flip()
melted_website <- melt(website, id.vars = "Date")
=======
>>>>>>> development
melted_website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
>>>>>>> 0409fe4049bea5e35b23ebe01de3ca745dc9c86d
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Sessions, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Users, `Total Web Sales`)) + geom_point() + geom_smooth()
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(Pageviews, `Total Web Sales`)) + geom_point() + geom_smooth()#
website %>%
filter(Date != "2017-01-31") %>%
ggplot(aes(`Pages/ Session`, `Total Web Sales`)) + geom_point() + geom_smooth()
sales$State %>% table %>% sort(decreasing=T) %>% data.frame
table(is.na(sales$`Date Inactive`) == is.na(sales$`Inactive Reason`))
table(sales$`Inactive Reason`) %>% sort(decreasing=T) %>% data.frame %>% head(10)
sales %>%
group_by(month_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=month_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_amount = sum(Amount, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_amount, fill=Product)) + geom_bar(stat="identity")
sales %>%
group_by(week_created, Product) %>%
summarise(total_count = sum(Count, na.rm = T)) %>%
ggplot(aes(x=week_created, y=total_count, fill=Product)) + geom_bar(stat="identity")
st <- state_sales %>%
group_by(region, lat, long, group) %>%
summarise(total_amount = sum(Amount, na.rm = T))
ggplot(st, aes(long, lat)) + geom_polygon(aes(group=group, fill=total_amount)) +
geom_path(colour="grey50")
ggplot(sales) + geom_bar(mapping=aes(as.character(month_created), fill = State), position = "fill") + theme(axis.text.x = element_text(angle = 45))
# get sheet names from excel file
readxl::excel_sheets("2017 Sales Summary.xlsx")
melted_website %>%
filter(variable %in% c("Date","Total Web Sales", "Sessions","Users","Pageviews")) %>%
ggplot(aes(x=Date, y=value)) + geom_line() + geom_smooth() + facet_grid(variable~., scales = "free_y")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
knit(plot(GeoStates))
library(knitr)
knit(plot(GeoStates))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates), output_format = "rmarkdown::md_document")
rmarkdown::render(plot(GeoStates), output_format = "rmarkdown::html_document")
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html"))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html")
?capture.output
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html")
getwd()
getwd()
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document",
file = "heatmap.html"))
library(googleVis)
library(rmarkdown)
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document"),
file = "heatmap.html")
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
capture.output(rmarkdown::render(plot(GeoStates),
output_format = "rmarkdown::html_document"),
file = "heatmap.html")
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = sum(Count))  %>%
select(region, Count)
GeoStates <- gvisGeoChart(df, "region", "Count",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
plot(GeoStates)
plot(GeoStates)
library(googleVis)
library(rmarkdown)
knit("sales_eda.Rmd")
df <- sales %>%
group_by(region) %>%
mutate(Count = mean(Amount))  %>%
select(region, Amount)
GeoStates <- gvisGeoChart(df, "region", "Amount",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
glimpse(USArrests)
library(flexdashboard)
library(knitr)
library(highcharter)
library(viridisLite)
library(tidyverse)
glimpse(USArrests)
glimpse(usgeojson)
usgeojson
usgeojson[1]
usgeojson[2]
usgeojson[3]
usgeojson[3]%>% class
library(DT)
?DT
?datatable
website
web_series
library(flexdashboard)
library(knitr)
library(DT)
knit("sales_eda.Rmd")
<<<<<<< HEAD
=======
<<<<<<< HEAD
=======
# web sales data sheet
web <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies
names(agencies)
map_chr(agencies, function(x) rep(x, 4))
agencies
rep(agencies, 4)
rep(agencies, each = 4)
View(asst)
names(asst)
names(agencies)[54:ncol(agencies)]
names(asst)[54:ncol(asst)]
names(asst)[54:ncol(asst)] <- agencies
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- rep(agencies, each = 4)
names(asst)[54:ncol(asst)] <- agencies
length(agencies)
agencies)
agencies
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- rep(agencies, each = 4)
names(asst)[54:ncol(asst)] <- agencies
lengthh(agencies)
lengt\h(agencies)
length(agencies)
ncol(asst)
names(asst)[54:ncol(asst)] %>% length
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
View(asst)
agencies
agencies <- asst[1,] %>% unlist
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies
agencies <- rep(agencies, each = 4)
names(asst)[54:(ncol(asst)-2)] %>% length
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
names(asst)[54:(ncol(asst)-2)] <- agencies
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
#names(asst)[54:(ncol(asst)-2)] <- agencies
agnames(asst)[54:(ncol(asst)-2)]
names(asst)[54:(ncol(asst)-2)]
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
glimpse(asst)
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
names(asst)[54:ncol(asst)] <- agencies
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Data directory
#' This is configured locally in order to avoid putting data
#' on github:
data_dir <- "C:/Users/Warner/Desktop/Big Deal/Pivot Health/"
#' ### Load packages and read data
>>>>>>> development
=======
>>>>>>> 0409fe4049bea5e35b23ebe01de3ca745dc9c86d
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "STM Web Sales Summary",
col_names = F)
<<<<<<< HEAD
glimpse(sales)
# filter data to remove completely NA rows
sales <- sales[rowSums(is.na(sales)) != ncol(sales),]
web[is.na(web)] <- 0
names(web) <- web[2,] %>% unlist
names(web)[names(web)=="0"] <- unlist(web[1,])[names(web)=="0"]
web <- web[-(1:2),]
web$Date <- as.numeric(web$Date)
web <- web[!is.na(web$Date),]
web$Date <- as.Date(web$Date,
origin = "1899-12-30")
website <- web[names(web)[c(1, 63:70)]]
change <- names(website)[-1]
for(x in seq_along(change)){
website[[change[x]]] <- as.numeric(website[[change[x]]])}
names(website)[names(website)=="TOTAL"] <- "Total Web Sales"
website <- website %>% filter(Date < "2017-07-03")
glimpse(website)
glimpse(sales)
table(sales$Product)
strsplit(sales$Product)
strsplit(sales$Product, " ")
strsplit(sales$Product, " ") %>% data.frame
strsplit(sales$Product, " ") %>% summary
strsplit(sales$Product, " ")[[1]]
strsplit(sales$Product, " ")[[3]]
strsplit(sales$Product, " ") %>% tibble
strsplit(sales$Product, " ") %>% ldply
library(tidyverse)
strsplit(sales$Product, " ") %>% ldply
strsplit(sales$Product, " ") %>% lddply
strsplit(sales$Product, " ") %>% as.data.frame
strsplit(sales$Product, " ") %>% as.matrix
strsplit(sales$Product, " ") %>% unlist
table(sales$Product)
grepl("3x4", sales$Product)
sales$tree_four <- ifelse(grepl("3x4", sales$Product),
"3x4", "Regular")
table(sales$tree_four)
sales$three_four <- ifelse(grepl("3x4", sales$Product),
"3x4", "Regular")
sales$product_level <- ifelse(grepl("Deluxe", sales$Product),
"Deluxe",
ifelse(grepl("Choice", sales$Product),
"Choice",
ifelse(grepl("Economy", sales$Product),
"Economy", "Standard")))
table(sales$product_level)
library(flexdashboard)
library(knitr)
library(DT)
sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
mpgg <- mpg %>%
filter(class %in% c("suv", "compact", "midsize")) %>%
group_by(class, manufacturer) %>%
summarize(count = n())
categories_grouped <- mpgg %>%
group_by(name = class) %>%
do(categories = .$manufacturer) %>%
list_parse()
library(purrr)
library(purrr)
mpgg <- mpg %>%
filter(class %in% c("suv", "compact", "midsize")) %>%
group_by(class, manufacturer) %>%
summarize(count = n())
categories_grouped <- mpgg %>%
group_by(name = class) %>%
do(categories = .$manufacturer) %>%
list_parse()
library(purrr)
mpgg <- mpg %>%
filter(class %in% c("suv", "compact", "midsize")) %>%
group_by(class, manufacturer) %>%
summarize(count = n())
categories_grouped <- mpgg %>%
group_by(name = class) %>%
do(categories = .$manufacturer)
categories_grouped
mpgg
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level)
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, color = product_level),
showInLegend = TRUE)
library(flexdashboard)
library(knitr)
library(DT)
library(tidyverse)
library(plotly)
ggplotly(week_sales)
library(flexdashboard)
library(knitr)
library(DT)
library(tidyverse)
knit("sales_eda.Rmd")
library(highcharter)
library(viridisLite)
thm <-
hc_theme(
colors = c("#1a6ecc", "#434348", "#90ed7d"),
chart = list(
backgroundColor = "transparent",
style = list(fontFamily = "Source Sans Pro")
),
xAxis = list(
gridLineWidth = 1
)
)
data("USArrests", package = "datasets")
data("usgeojson")
USArrests <- USArrests %>%
mutate(state = rownames(.))
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)) %>%
list.parse2()
highchart() %>%
hc_add_series_map(usgeojson, USArrests, name = "Sales",
value = "Murder", joinBy = c("woename", "state"),
dataLabels = list(enabled = TRUE,
format = '{point.properties.postalcode}')) %>%
hc_colorAxis(stops = colstops) %>%
hc_legend(valueDecimals = 0, valueSuffix = "%") %>%
hc_mapNavigation(enabled = TRUE) %>%
hc_add_theme(thm)
categories_grouped
products
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level)
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, color = product_level),
showInLegend = TRUE)
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level)
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, color = product_level),
showInLegend = FALSE)
knit_with_parameters('C:/Users/Warner/Desktop/Big Deal/Pivot Health/Sales Data/sales_dashboard.Rmd')
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count, group = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level,
color = product_level,
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level,
color = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = product_level) %>%
do(categories = .$three_four) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = FALSE) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = FALSE) %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_theme(hc_theme_flat())
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
highchart() %>%
hc_add_series(data = products, type = "bar",
hcaes(y = count,
group = product_level),
showInLegend = TRUE) %>%
hc_xAxis(categories = categories_grouped) %>%
hc_add_theme(hc_theme_flat())
?do
categories_grouped
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
#highchart() %>%
# hc_add_series(data = products, type = "bar",
#              hcaes(y = count,
#                   group = product_level),
#            showInLegend = TRUE) %>%
#hc_xAxis(categories = categories_grouped) %>%
#hc_add_theme(hc_theme_economist())
ggplot(products, aes(factor(product_level), count, fill = three_four)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
products <- sales %>%
group_by(product_level, three_four) %>%
summarize(count = n())
categories_grouped <- products %>%
group_by(name = three_four) %>%
do(categories = .$product_level) %>%
list_parse()
#highchart() %>%
# hc_add_series(data = products, type = "bar",
#              hcaes(y = count,
#                   group = product_level),
#            showInLegend = TRUE) %>%
#hc_xAxis(categories = categories_grouped) %>%
#hc_add_theme(hc_theme_economist())
ggplot(products, aes(factor(product_level), count, fill = three_four)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1") + coord_flip()
>>>>>>> development
<<<<<<< HEAD
=======
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
#' Write flat files
write_csv(web_sales, paste0(data_dir, "web_sales.csv"))
write_csv(web_traffic, paste0(data_dir, "web_traffic.csv"))
write_csv(adroit, paste0(data_dir, "adroit_sales.csv"))
>>>>>>> development
=======
>>>>>>> 0409fe4049bea5e35b23ebe01de3ca745dc9c86d
