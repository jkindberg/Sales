col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
#names(asst)[54:(ncol(asst)-2)] <- agencies
agnames(asst)[54:(ncol(asst)-2)]
names(asst)[54:(ncol(asst)-2)]
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
glimpse(asst)
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
names(asst)[54:ncol(asst)] <- agencies
asst <- read_excel("C:/Users/Warner/Desktop/Big Deal/Pivot Health/2017 Sales Summary.xlsx",
sheet = "Asst Agencies",
col_names = F)
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Data directory
#' This is configured locally in order to avoid putting data
#' on github:
data_dir <- "C:/Users/Warner/Desktop/Big Deal/Pivot Health/"
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
#' Write flat files
write_csv(web_sales, paste0(data_dir, "web_sales.csv"))
write_csv(web_traffic, paste0(data_dir, "web_traffic.csv"))
write_csv(adroit, paste0(data_dir, "adroit_sales.csv"))
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Data directory
#' This is configured locally in order to avoid putting data
#' on github:
data_dir <- "C:/Users/Warner/Desktop/Big Deal/Pivot Health/"
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' ### **Asst Agencies Tab**
asst <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
View(asst)
View(adroit)
glimpse(adroit)
#' ---
#' title: "Data Processing"
#' output: html_document
#' ---
#' this script contains code for restructuring the data as it currently
#' exists in the excel file we received last week.
#' ### Data directory
#' This is configured locally in order to avoid putting data
#' on github:
data_dir <- "C:/Users/Warner/Desktop/Big Deal/Pivot Health/"
#' ### Load packages and read data
library(tidyverse)
library(readxl)
library(reshape2)
#' ### **Data processing function**
#' This function is used to convert the 3 main excel tabs
#' to dataframes for R. It is highly dependent on how the
#' spreadsheet is organized/structured currently
proc_data <- function(data){
data[is.na(data)] <- 0
names(data) <- data[2,] %>% unlist
names(data)[names(data)=="0"] <- unlist(data[1,])[names(data)=="0"]
data <- data[-(1:2),]
#' Date column needs to be cleaned up
data$Date <- as.numeric(data$Date)
data <- data[!is.na(data$Date),]
data$Date <- as.Date(data$Date,
origin = "1899-12-30")
if('0' %in% names(data)){
data <- data %>% select(-TOTALS, -`0`, -TOTAL)
} else{
names(data)[duplicated(names(data))] <- paste(names(data)[duplicated(names(data))], "4 x 3")
data <- data %>% select(-TOTALS, -TOTAL)
}
melt_cols1 <- names(data)[!(names(data) %in% states$Abbreviation)]
data <- melt(data, id.vars = melt_cols1)
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "State"
names(data) <- trimws(names(data))
# should be a better way to do this
fuck_it <- c(grep("Deluxe", names(data)),
grep("Standard", names(data)),
grep("Economy", names(data)),
grep("Choice", names(data)))
data <- melt(data, id.vars = names(data)[-fuck_it])
data <- data %>%
filter(value != 0) %>%
select(-value)
names(data)[names(data)=="variable"] <- "Plan"
#' **Plan duration column - a flag for yearly or 90 day
data$Duration <- ifelse(grepl("4 x 3", data$Plan),
"Yearly", "90 Day")
#' clean up plan column now that duration flag exists
data$Plan <- gsub("4 x 3", "", data$Plan) %>% trimws
data
}
#' State file for use later
states <- read_csv("states.csv")
#' ### **STM Web Sales Summary Tab**
### Web data needs reformatting to be a dataframe
# web sales data sheet
web <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "STM Web Sales Summary",
col_names = F)
#' Web data should be split to 2 tables:
#' Daily site activity and daily websales by state
web <- proc_data(web)
#' #### **Web Sales table**
web_sales <- web %>%
select(Date, State, Plan, Duration)
#' #### **Web traffic table**
web_traffic <- web %>%
select(-State, -Plan)
#' ### **Adroit Sales Summary Tab**
adroit <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Adroit Sales Summary",
col_names = F)
adroit <- proc_data(adroit)
#' Remove summary columns for now
adroit <- adroit %>% select(-`Net Inforce`, -`Coverage Term'd`)
#' ### **Asst Agencies Tab**
asst <- read_excel(paste0(data_dir,
"2017 Sales Summary.xlsx"),
sheet = "Asst Agencies",
col_names = F)
agencies <- asst[1,] %>% unlist
agencies <- agencies[!is.na(agencies)]
agencies <- agencies[-c(length(agencies),
length(agencies)-1)]
agencies <- rep(agencies, each = 4)
#' Write flat files
write_csv(web_sales, paste0(data_dir, "web_sales.csv"))
write_csv(web_traffic, paste0(data_dir, "web_traffic.csv"))
write_csv(adroit, paste0(data_dir, "adroit_sales.csv"))
library(highcharter)
library(viridisLite)
knit_with_parameters('C:/Users/Warner/Desktop/Big Deal/Pivot Health/Sales Data/sales_dashboard.Rmd')
source("data_processing.R")
glimpse(web_plans)
max(web_plans$Date)
web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) + geom_bar()
web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) + geom_bar() + geom_bar(stat="identity")
web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) geom_bar(stat="identity")
web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) + geom_bar(stat="identity")
web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) + geom_bar(stat="identity")
web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) + geom_bar(stat="identity") %>%
ggplotly
g1 <- web_plans %>%
filter(Date == max(web_plans$Date)) %>%
ggplot(aes(x = Plan, y = Sales)) + geom_bar(stat="identity")
ggplotly(g1)
?lubridate
?month
?months
max(web_plans$Date) %>% month
max(web_plans$Date) %>% months
glimpse(web_plans)
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_area(stat = "bin")
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_area(stat = "bin")
g1
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_area()
g1
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_bar()
g1
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_area(stat="bin")
g1
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_area()
g1
g1 <- web_plans %>%
ggplot(aes(x = Date, y = Sales, fill = Plan)) + geom_area()
ggplotly(g1)
?ggtitle
library(tidyverse)
?ggtitle
library(flexdashboard)
library(knitr)
library(DT)
library(tidyverse)
library(plotly)
library(shiny)
latest_day <- max(web_plans$Date)
source("data_processing.R")
plan_table
latest_day <- max(web_plans$Date)
g1 <- plan_table %>%
filter(Date == latest_day &
Tab == "web") %>%
ggplot(aes(x = Plan, y = Sales, fill = Plan)) + geom_bar(stat="identity", colour = "#1e1e1e") + scale_fill_brewer() + coord_flip() + theme(panel.background = element_rect(fill = "#BEC2C4")) + scale_x_discrete() + ggtitle("")
ggplotly(g1)
# Chunk 1: c8 setup
library(flexdashboard)
library(knitr)
library(DT)
library(tidyverse)
library(plotly)
library(shiny)
# Chunk 2: c7
source("data_processing.R")
# Chunk 3
selectInput("duration", label = h3("Select Plan Duration"), choices = list("All"=1,"Yearly"=2, "90 Day"=3), selected =1)
# Chunk 4
dt <- gsub("2017-", "", as.Date(Sys.time()))
#renderValueBox({
valueBox(
value = paste("Web Sales Snapshot", "-",dt),
icon = "fa-area-chart"
)
#})
# Chunk 5
latest_day <- max(web_plans$Date)
g1 <- plan_table %>%
filter(Date == latest_day &
Tab == "web") %>%
ggplot(aes(x = Plan, y = Sales, fill = Plan)) + geom_bar(stat="identity", colour = "#1e1e1e") + scale_fill_brewer() + coord_flip() + theme(panel.background = element_rect(fill = "#BEC2C4")) + scale_x_discrete() + ggtitle("")
ggplotly(g1)
# Chunk 6
g1 <- plan_table %>%
filter(months(Date) == months(latest_day) &
Tab == "web") %>%
ggplot(aes(x = Plan, y = Sales, fill = Plan)) + geom_bar(stat="identity", colour = "#1e1e1e") + scale_fill_brewer() + coord_flip() + theme(panel.background = element_rect(fill = "#BEC2C4"))
ggplotly(g1)
plans_expanded <- data.frame(
Date = rep(plan_table$Date, plans_table$Sales),
Plan = rep(plan_table$Plan, plan_table$Sales),
Duration = rep(plan_table$Duration, plan_table$Sales),
Tab = rep(plan_table$Tab, plan_table$Sales)
)
g1 <- plans_expanded %>%
filter(Tab == "Web") %>%
ggplot(aes(x = Date, fill = Plan)) + scale_fill_brewer() + geom_area(stat="bin", colour = "#1e1e1e")  + theme(panel.background = element_rect(fill = "#BEC2C4"))
ggplotly(g1)
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- tidyr::gather(crimes, variable, value, -state)
states_map <- map_data("state")
g <- ggplot(crimesm, aes(map_id = state)) +
geom_map(aes(fill = value), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) + theme_void()
ggplotly(g)
plans_expanded <- data.frame(
Date = rep(plan_table$Date, plans_table$Sales),
Plan = rep(plan_table$Plan, plan_table$Sales),
Duration = rep(plan_table$Duration, plan_table$Sales),
Tab = rep(plan_table$Tab, plan_table$Sales)
)
plans_expanded <- data.frame(
Date = rep(plan_table$Date, plan_table$Sales),
Plan = rep(plan_table$Plan, plan_table$Sales),
Duration = rep(plan_table$Duration, plan_table$Sales),
Tab = rep(plan_table$Tab, plan_table$Sales)
)
plans_expanded
plans_expanded %>% head
plans_expanded <- data.frame(
Date = rep(plan_table$Date, plan_table$Sales),
Plan = rep(plan_table$Plan, plan_table$Sales),
Duration = rep(plan_table$Duration, plan_table$Sales),
Tab = rep(plan_table$Tab, plan_table$Sales)
)
g1 <- plans_expanded %>%
filter(Tab == "web") %>%
ggplot(aes(x = Date, fill = Plan)) + scale_fill_brewer() + geom_area(stat="bin", colour = "#1e1e1e")  + theme(panl.background = element_rect(fill = "#BEC2C4"))
ggplotly(g1)
plans_expanded <- data.frame(
Date = rep(plan_table$Date, plan_table$Sales),
Plan = rep(plan_table$Plan, plan_table$Sales),
Duration = rep(plan_table$Duration, plan_table$Sales),
Tab = rep(plan_table$Tab, plan_table$Sales)
)
g1 <- plans_expanded %>%
filter(Tab == "web") %>%
ggplot(aes(x = Date, fill = Plan)) + scale_fill_brewer() + geom_area(stat="bin", colour = "#1e1e1e")  + theme(panel.background = element_rect(fill = "#BEC2C4"))
ggplotly(g1)
latest_day <- max(web_plans$Date)
g1 <- plan_table %>%
filter(Date == latest_day &
Tab == "web") %>%
ggplot(aes(x = Plan, y = Sales, fill = Plan)) + geom_bar(stat="identity", colour = "#1e1e1e") + scale_fill_brewer() + coord_flip() + theme(panel.background = element_rect(fill = "#BEC2C4")) + scale_x_discrete() + ggtitle("Web sales by product - 07/02/2017")
ggplotly(g1)
?width
?valueBox
?h3
?selectInput
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- tidyr::gather(crimes, variable, value, -state)
states_map <- map_data("state")
g <- ggplot(crimesm, aes(map_id = state)) +
geom_map(aes(fill = value), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat)
ggplotly(g)
crimes <- data.frame(state = tolower(rownames(USArrests)), USArrests)
crimesm <- tidyr::gather(crimes, variable, value, -state)
states_map <- map_data("state")
g <- ggplot(crimesm, aes(map_id = state)) +
geom_map(aes(fill = value), map = states_map) +
expand_limits(x = states_map$long, y = states_map$lat) + theme_void() + theme(panel.background = element_rect(fill = "#BEC2C4"))
ggplotly(g)
